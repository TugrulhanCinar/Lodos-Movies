//
//  MovieDetailViewController.swift
//  Lodos Movies
//
//  Created by TuÄŸrul on 15.03.2024.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MovieDetailDisplayLogic: AnyObject {
    func displayInitializeResult(viewModel: MovieDetail.Initialize.ViewModel)
    func displayReloadResult(viewModel: MovieDetail.Reload.ViewModel)
    func displayFinalizeResult(viewModel: MovieDetail.Finalize.ViewModel)
}

class MovieDetailViewController: BaseViewController, MovieDetailDisplayLogic {
    var interactor: MovieDetailBusinessLogic?
    var router: (NSObjectProtocol & MovieDetailRoutingLogic & MovieDetailDataPassing)?

    // MARK: Outlets
    
    @IBOutlet weak var imageViewMovie: UIImageView!
    @IBOutlet weak var textViewMovieDetails: UITextView!
    @IBOutlet weak var indicatorView: UIActivityIndicatorView!
    
    // MARK: lifecycle
    
    override func viewDidLoad() {
        
        super.viewDidLoad()
        interactor?.reload(request: MovieDetail.Reload.Request())
    }

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup Pattern

    private func setup() {

        let viewController = self
        let interactor = MovieDetailInteractor()
        let presenter = MovieDetailPresenter()
        let router = MovieDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: - Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

}

// MARK: - Display Logic

extension MovieDetailViewController {
    
    func displayInitializeResult(viewModel: MovieDetail.Initialize.ViewModel) { }

    func displayReloadResult(viewModel: MovieDetail.Reload.ViewModel) { 
        
        
    }

    func displayFinalizeResult(viewModel: MovieDetail.Finalize.ViewModel) { }
}

// MARK: - Image Logics

extension MovieDetailViewController {
    
    private func setImage(imagePath: String) {

        guard let url = URL(string: imagePath) else {

            print("Failed to present attachment due to an invalid url: ", imagePath)
            return
        }
        imageViewMovie.image  = nil
        imageViewMovie.isHidden = true
        indicatorView.unHiddenAndStartAnimation()

        let task = URLSession.shared.dataTask(with: url, completionHandler: { (data, response, error) in
            if error == nil {
                guard let unwrappedData = data, let image = UIImage(data: unwrappedData) else { return }
                DispatchQueue.main.async {
                    self.indicatorView.hiddenAndStopAnimation()
                    self.imageViewMovie.isHidden = false
                    self.imageViewMovie.image = image
                }
            } else {
                self.setBrokenImage()
            }
        })
        task.resume()
    }
    
    private func setBrokenImage() {
        
        imageViewMovie.image = LocaleImage.brokenImage.getUIImage()
    }
}
