//
//  MainPageViewController.swift
//  Lodos Movies
//
//  Created by Tuğrul on 13.03.2024.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
// toplu aramak için: https://www.omdbapi.com/?s=God+father&apikey=8217f5d4 // https://www.omdbapi.com/?s={txt}&apikey=8217f5d4

// title üzerinden tekli aramak için: https://www.omdbapi.com/?t=God+father+&apikey=8217f5d4 // https://www.omdbapi.com/?t={txt}&apikey=8217f5d4

// id üzerinden aratmak için = http://www.omdbapi.com/?i=tt12994556&apikey=8217f5d4

protocol MainPageDisplayLogic: AnyObject {

    func displayInitializeResult(viewModel: MainPage.Initialize.ViewModel)
    func displaySearchResult(viewModel: MainPage.Search.ViewModel)
}

class MainPageViewController: BaseViewController, MainPageDisplayLogic {
    
    var interactor: MainPageBusinessLogic?
    var router: (NSObjectProtocol & MainPageRoutingLogic & MainPageDataPassing)?
    
    // MARK: - Variables
    
    private var search: [Search] = []
    
    // MARK: Outlets
    
    @IBOutlet weak var searchBarMovie: UISearchBar!
    @IBOutlet weak var indicator: UIActivityIndicatorView!
    @IBOutlet weak var tableViewMovies: UITableView!
    
    // MARK: - View lifecycle

    override func viewDidLoad() {
        
        super.viewDidLoad()
        registerTableView()
    }
    
    // MARK: - Setup

    private func setup() {
        let viewController = self
        let interactor = MainPageInteractor()
        let presenter = MainPagePresenter()
        let router = MainPageRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    private func registerTableView() {
        
        tableViewMovies.dataSource = self
        tableViewMovies.delegate = self
        let nib = UINib(nibName: "MovieTableViewCell", bundle: Bundle(for: MainPageViewController.self))
        tableViewMovies.register(nib, forCellReuseIdentifier: "MovieTableViewCell")
    }

}

// MARK: - Display Logic

extension MainPageViewController {
    
    func displayInitializeResult(viewModel: MainPage.Initialize.ViewModel) { }
    
    func displaySearchResult(viewModel: MainPage.Search.ViewModel) {
     
        
    }
    

}
// MARK: - Viewcontroller

extension MainPageViewController: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
        return search.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        if let movie = search[safe: indexPath.row] {
            let movieCell = tableViewMovies.dequeueReusableCell(withIdentifier: "MovieTableViewCell") as! MovieTableViewCell
            let moviePresentation = MovieTableViewCellPresentation(id: movie.imdbID, title: movie.title, imageUrl: movie.poster)
            movieCell.presentation = moviePresentation
            movieCell.delegate = self
            return movieCell
        }
        return UITableViewCell()
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        
        return 500
    }
    
}

// MARK: - MovieTableViewCellDelegate

extension MainPageViewController: MovieTableViewCellDelegate {
    
    func movieSection(_ sender: MovieTableViewCell, section: String) {
        
        // TODO: Add on tap a cell
        print("tapped: \(section)")
    }
    
    
}
